% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/initialization_utilities.R
\name{inheritance}
\alias{inheritance}
\alias{inherit_from}
\alias{implements}
\title{Inheritance}
\usage{
inherit_from(parent, traits, ...)

implements(interface)
}
\arguments{
\item{parent}{A single class from which to inherit methods and fields.}

\item{traits}{A vector of \code{\link{Trait}} classes from which to
forward methods (trait classes are like mixin class in Python).}

\item{...}{Arguments to pass to the initialization of the \code{parent}
class.}

\item{interface}{Class definition that inherits from \code{\link{Interface}}}
}
\description{
Inherit methods and fields from other classes.
}
\details{
There are three ways to inherit from other classes:
(1) directly
(2) using the \code{inherit_from} function
(3) using the \code{implements} function

Each of these ways works by adding a line that creates an object called
\code{self} at the beginning of a class definition. The object \code{self}
is an object of class \code{ParentClass} and you are free to add new fields
and methods to this object.
}
\section{Direct Inheritance}{


\code{self = ParentClass(...)}

Here \code{ParentClass} is the name of the parent class being inherited from.
In most cases, direct inheritance is the most useful approach. The other
two are for more advanced use.
}

\section{Inherit From}{


\code{self = inherit_from(ParentClass, list_of_trait_classes)}

Here \code{ParentClass} is the class being directly inherited from
and \code{list_of_trait_classes} is a list of \code{\link{Trait}}
classes containing methods to be forwarded to \code{self}.
}

\section{Implementations}{


\code{self = implements(ParentInterface)}

Here \code{ParentInterface} is an abstract set of method signatures.
Following this initialization, concrete definitions of these abstract
method need to be added to \code{self}. This process is referred to as
implementing an interface.
}

